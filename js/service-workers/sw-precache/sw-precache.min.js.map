{"version":3,"sources":["wwwroot/js/service-workers/sw-precache/sw-precache.js"],"names":["crypto","require","defaults","externalFunctions","fs","glob","mkdirp","path","prettyBytes","template","util","polyfill","VERSION","absolutePath","relativePath","resolve","process","cwd","getFileAndSizeAndHashForFile","file","stat","statSync","isFile","buffer","readFileSync","size","hash","getHash","getFilesAndSizesAndHashesForGlobPattern","globPattern","excludeFilePath","sync","replace","sep","map","filter","fileAndSizeAndHash","data","md5","createHash","update","digest","escapeRegExp","string","generateRuntimeCaching","runtimeCaching","reduce","prev","curr","line","default","format","urlPattern","JSON","stringify","RegExp","Error","method","handler","stringifyToolboxOptions","options","str","origin","successResponses","generate","params","callback","Promise","reject","cacheId","clientsClaim","directoryIndex","dontCacheBustUrlsMatching","dynamicUrlToDependencies","handleFetch","ignoreUrlParametersMatching","importScripts","logger","console","log","maximumFileSizeToCacheInBytes","navigateFallback","navigateFallbackWhitelist","replacePrefix","skipWaiting","staticFileGlobs","stripPrefix","stripPrefixMulti","templateFilePath","join","dirname","realpathSync","__filename","verbose","Array","isArray","swToolboxCode","relativeUrlToHash","cumulativeSize","forEach","outputFilePath","relativeUrl","Object","keys","match","dynamicUrl","dependency","isString","isBuffer","Buffer","length","filesAndSizesAndHashes","sort","e","code","concatenatedHashes","pathToSWToolbox","relativeUrls","precacheConfig","readFile","error","populatedTemplate","regex","source","version","write","filePath","finish","value","then","serviceWorkerFileContents","writeFile","module","exports","env","NODE_ENV"],"mappings":"AAiBA,aAEA,IAAIA,OAASC,QAAQ,UAEjBC,SAAWD,QAAQ,mBAEnBE,kBAAoBF,QAAQ,kBAE5BG,GAAKH,QAAQ,MAEbI,KAAOJ,QAAQ,QAEfK,OAASL,QAAQ,UAEjBM,KAAON,QAAQ,QAEfO,YAAcP,QAAQ,gBAEtBQ,SAAWR,QAAQ,mBAEnBS,KAAOT,QAAQ,QAEnBA,QAAQ,eAAeU,WAGvB,IAAIC,QAAU,KAEd,SAASC,aAAaC,GACpB,OAAOP,KAAKQ,QAAQC,QAAQC,MAAOH,GAGrC,SAASI,6BAA6BC,GACpC,IAAIC,EAAOhB,GAAGiB,SAASF,GAEvB,GAAIC,EAAKE,SAAU,CACjB,IAAIC,EAASnB,GAAGoB,aAAaL,GAC7B,MAAO,CACLA,KAAMA,EACNM,KAAML,EAAKK,KACXC,KAAMC,QAAQJ,IAIlB,OAAO,KAGT,SAASK,wCAAwCC,EAAaC,GAC5D,OAAOzB,KAAK0B,KAAKF,EAAYG,QAAQzB,KAAK0B,IAAK,MAAMC,IAAI,SAAUf,GAGjE,OAAOW,IAAoBjB,aAAaM,GAAQ,KAAOD,6BAA6BC,KACnFgB,OAAO,SAAUC,GAClB,OAA8B,OAAvBA,IAIX,SAAST,QAAQU,GACf,IAAIC,EAAMtC,OAAOuC,WAAW,OAE5B,OADAD,EAAIE,OAAOH,GACJC,EAAIG,OAAO,OAGpB,SAASC,aAAaC,GACpB,OAAOA,EAAOX,QAAQ,sBAAuB,QAG/C,SAASY,uBAAuBC,GAC9B,OAAOA,EAAeC,OAAO,SAAUC,EAAMC,GAC3C,IAAIC,EAEJ,GAAID,EAAKE,QACPD,EAAOvC,KAAKyC,OAAO,yCAA0CH,EAAKE,aAC7D,CACL,IAAIE,EAAaJ,EAAKI,WAMtB,GAJ0B,iBAAfA,IACTA,EAAaC,KAAKC,UAAUF,MAGxBA,aAAsBG,QAAgC,iBAAfH,GAC3C,MAAM,IAAII,MAAM,wDAGlBP,EAAOvC,KAAKyC,OAAO,mCACnBH,EAAKS,QAAU,MACfL,GAKyB,iBAAjBJ,EAAKU,QAAuB,WAAa,IAAMV,EAAKU,QAC5DC,wBAAwBX,EAAKY,UAG/B,OAAOb,EAAOE,GACb,IAGL,SAASU,wBAAwBC,GAC/BA,EAAUA,GAAW,GACrB,IAAIC,EAAMR,KAAKC,UAAUM,GAUzB,OARIA,EAAQE,kBAAkBP,SAC5BM,EAAMA,EAAI7B,QAAQ,kBAAmB,KAAO4B,EAAQE,SAGlDF,EAAQG,4BAA4BR,SACtCM,EAAMA,EAAI7B,QAAQ,4BAA6B,KAAO4B,EAAQG,mBAGzDF,EAGT,SAASG,SAASC,EAAQC,GACxB,OAAO,IAAIC,QAAQ,SAAUpD,EAASqD,GACpCH,EAAS/D,SAAS+D,GAAU,GAAI,CAC9BI,QAAS,GACTC,cAAc,EACdC,eAAgB,aAChBC,0BAA2B,KAC3BC,yBAA0B,GAC1BC,aAAa,EACbC,4BAA6B,CAAC,SAC9BC,cAAe,GACfC,OAAQC,QAAQC,IAChBC,8BAA+B,QAE/BC,iBAAkB,GAClBC,0BAA2B,GAC3BC,cAAe,GACfC,aAAa,EACbC,gBAAiB,GACjBC,YAAa,GACbC,iBAAkB,GAClBC,iBAAkBjF,KAAKkF,KAAKlF,KAAKmF,QAAQtF,GAAGuF,aAAaC,aAAc,KAAM,uBAC7EC,SAAS,IAGNC,MAAMC,QAAQ9B,EAAOU,+BACxBV,EAAOU,4BAA8B,CAACV,EAAOU,8BAG/C,IAsEI9B,EACAmD,EAvEAC,EAAoB,GACpBC,EAAiB,EAwErB,GAvEAjC,EAAOsB,iBAAiBtB,EAAOqB,aAAerB,EAAOkB,cACrDlB,EAAOoB,gBAAgBc,QAAQ,SAAUtE,GACVD,wCAAwCC,EAAaoC,EAAOmC,gBAElED,QAAQ,SAAU/D,GACvC,GAAIA,EAAmBX,MAAQwC,EAAOe,8BAA+B,CAEnE,IAAIqB,EAAcjE,EAAmBjB,KAAKa,QAAQ,IAAIuB,OAAO,KAAO+C,OAAOC,KAAKtC,EAAOsB,kBAAkBrD,IAAIQ,cAAc+C,KAAK,KAAO,KAAM,SAAUe,GACrJ,OAAOvC,EAAOsB,iBAAiBiB,KAC9BxE,QAAQzB,KAAK0B,IAAK,KACrBgE,EAAkBI,GAAejE,EAAmBV,KAEhDuC,EAAO4B,SACT5B,EAAOY,OAAOnE,KAAKyC,OAAO,oCAAqCf,EAAmBjB,KAAMX,YAAY4B,EAAmBX,QAGzHyE,GAAkB9D,EAAmBX,UAErCwC,EAAOY,OAAOnE,KAAKyC,OAAO,sDAAuDf,EAAmBjB,KAAMX,YAAY4B,EAAmBX,MAAOjB,YAAYyD,EAAOe,qCAIzKsB,OAAOC,KAAKtC,EAAOQ,0BAA0B0B,QAAQ,SAAUM,GAC7D,IAAIC,EAAazC,EAAOQ,yBAAyBgC,GAC7CE,EAAiC,iBAAfD,EAClBE,EAAWC,OAAOD,SAASF,GAE/B,IAAKZ,MAAMC,QAAQW,KAAgBC,IAAaC,EAC9C,MAAMpD,MAAM9C,KAAKyC,OAAO,gGAAsGsD,IAGhI,GAAIE,GAAYC,EACdV,GAAkBQ,EAAWI,OAC7Bb,EAAkBQ,GAAc9E,QAAQ+E,OACnC,CACL,IAAIK,EAAyBL,EAAWM,OAAO9E,IAAI,SAAUf,GAC3D,IACE,OAAOD,6BAA6BC,GACpC,MAAO8F,GAOP,KALe,WAAXA,EAAEC,MACJjD,EAAOY,OAAOnE,KAAKyC,OAAO,2JAAsKhC,EAAMsF,IAIlMQ,KAGNE,EAAqB,GACzBJ,EAAuBZ,QAAQ,SAAU/D,GAGvC8D,GAAkB9D,EAAmBX,KACrC0F,GAAsB/E,EAAmBV,OAE3CuE,EAAkBQ,GAAc9E,QAAQwF,GAGtClD,EAAO4B,UACLc,EACF1C,EAAOY,OAAOnE,KAAKyC,OAAO,mEAAoEsD,IACrFG,EACT3C,EAAOY,OAAOnE,KAAKyC,OAAO,mEAAoEsD,IAE9FxC,EAAOY,OAAOnE,KAAKyC,OAAO,mDAAoDsD,EAAYC,OAO5FzC,EAAOpB,eAAgB,CACzBA,EAAiBD,uBAAuBqB,EAAOpB,gBAE/C,IAAIuE,EAAkBnH,QAAQc,QAAQ,4BAEtCiF,EAAgB5F,GAAGoB,aAAa4F,EAAiB,QAAQpF,QAAQ,yCAA0C,IAU7G,IAAIqF,EAAef,OAAOC,KAAKN,GAC3BqB,EAAiBD,EAAaL,OAAO9E,IAAI,SAAUmE,GACrD,MAAO,CAACA,EAAaJ,EAAkBI,MAEzCpC,EAAOY,OAAOnE,KAAKyC,OAAO,oDAAqD3C,YAAY0F,GAAiBmB,EAAaP,SACzH1G,GAAGmH,SAAStD,EAAOuB,iBAAkB,OAAQ,SAAUgC,EAAOnF,GAC5D,GAAImF,EAKF,OAJItD,GACFA,EAASsD,GAGJpD,EAAOoD,GAGhB,IAAIC,EAAoBhH,SAAS4B,EAAT5B,CAAe,CACrC4D,QAASJ,EAAOI,QAChBC,aAAcL,EAAOK,aAErBC,eAAgBN,EAAOM,gBAAkB,GACzCC,0BAA2BP,EAAOO,4BAA6B,EAC/DrE,kBAAmBA,kBACnBuE,YAAaT,EAAOS,YACpBC,4BAA6BV,EAAOU,4BACpCC,cAAeX,EAAOW,cAAgBX,EAAOW,cAAc1C,IAAImB,KAAKC,WAAWmC,KAAK,KAAO,KAE3FR,iBAAkBhB,EAAOgB,kBAAoB,GAC7CC,0BAA2B7B,KAAKC,UAAUW,EAAOiB,0BAA0BhD,IAAI,SAAUwF,GACvF,OAAOA,EAAMC,UAEfL,eAAgBjE,KAAKC,UAAUgE,GAC/BzE,eAAgBA,EAChBuC,YAAanB,EAAOmB,YACpBY,cAAeA,EACf4B,QAAShH,UAGPsD,GACFA,EAAS,KAAMuD,GAGjB1G,EAAQ0G,OAKd,SAASI,MAAMC,EAAU7D,EAAQC,GAC/B,OAAO,IAAIC,QAAQ,SAAUpD,EAASqD,GACpC,SAAS2D,EAAOP,EAAOQ,GACjBR,EACFpD,EAAOoD,GAEPzG,EAAQiH,GAGN9D,GACFA,EAASsD,EAAOQ,GAIpB1H,OAAOyB,KAAKxB,KAAKmF,QAAQoC,IAIzB7D,EAAOmC,eAAiBvF,aAAaiH,GACrC9D,SAASC,GAAQgE,KAAK,SAAUC,GAC9B9H,GAAG+H,UAAUL,EAAUI,EAA2BH,IACjDA,KAIPK,OAAOC,QAAU,CACfrE,SAAUA,SACV6D,MAAOA,OAGoB,oBAAzB7G,QAAQsH,IAAIC,WACdH,OAAOC,QAAQzF,uBAAyBA","file":"sw-precache.min.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-env node */\n'use strict';\n\nvar crypto = require('crypto');\n\nvar defaults = require('lodash.defaults');\n\nvar externalFunctions = require('./functions.js');\n\nvar fs = require('fs');\n\nvar glob = require('glob');\n\nvar mkdirp = require('mkdirp');\n\nvar path = require('path');\n\nvar prettyBytes = require('pretty-bytes');\n\nvar template = require('lodash.template');\n\nvar util = require('util');\n\nrequire('es6-promise').polyfill(); // This should only change if there are breaking changes in the cache format used by the SW.\n\n\nvar VERSION = 'v3';\n\nfunction absolutePath(relativePath) {\n  return path.resolve(process.cwd(), relativePath);\n}\n\nfunction getFileAndSizeAndHashForFile(file) {\n  var stat = fs.statSync(file);\n\n  if (stat.isFile()) {\n    var buffer = fs.readFileSync(file);\n    return {\n      file: file,\n      size: stat.size,\n      hash: getHash(buffer)\n    };\n  }\n\n  return null;\n}\n\nfunction getFilesAndSizesAndHashesForGlobPattern(globPattern, excludeFilePath) {\n  return glob.sync(globPattern.replace(path.sep, '/')).map(function (file) {\n    // Return null if we want to exclude this file, and it will be excluded in\n    // the subsequent filter().\n    return excludeFilePath === absolutePath(file) ? null : getFileAndSizeAndHashForFile(file);\n  }).filter(function (fileAndSizeAndHash) {\n    return fileAndSizeAndHash !== null;\n  });\n}\n\nfunction getHash(data) {\n  var md5 = crypto.createHash('md5');\n  md5.update(data);\n  return md5.digest('hex');\n}\n\nfunction escapeRegExp(string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction generateRuntimeCaching(runtimeCaching) {\n  return runtimeCaching.reduce(function (prev, curr) {\n    var line;\n\n    if (curr.default) {\n      line = util.format('\\ntoolbox.router.default = toolbox.%s;', curr.default);\n    } else {\n      var urlPattern = curr.urlPattern;\n\n      if (typeof urlPattern === 'string') {\n        urlPattern = JSON.stringify(urlPattern);\n      }\n\n      if (!(urlPattern instanceof RegExp || typeof urlPattern === 'string')) {\n        throw new Error('runtimeCaching.urlPattern must be a string or RegExp');\n      }\n\n      line = util.format('\\ntoolbox.router.%s(%s, %s, %s);', // Default to setting up a 'get' handler.\n      curr.method || 'get', // urlPattern might be a String or a RegExp. sw-toolbox supports both.\n      urlPattern, // If curr.handler is a string, then assume it's the name of one\n      // of the built-in sw-toolbox strategies.\n      // E.g. 'networkFirst' -> toolbox.networkFirst\n      // If curr.handler is something else (like a function), then just\n      // include its body inline.\n      (typeof curr.handler === 'string' ? 'toolbox.' : '') + curr.handler, // Default to no options.\n      stringifyToolboxOptions(curr.options));\n    }\n\n    return prev + line;\n  }, '');\n}\n\nfunction stringifyToolboxOptions(options) {\n  options = options || {};\n  var str = JSON.stringify(options);\n\n  if (options.origin instanceof RegExp) {\n    str = str.replace(/(\"origin\":)\\{\\}/, '$1' + options.origin);\n  }\n\n  if (options.successResponses instanceof RegExp) {\n    str = str.replace(/(\"successResponses\":)\\{\\}/, '$1' + options.successResponses);\n  }\n\n  return str;\n}\n\nfunction generate(params, callback) {\n  return new Promise(function (resolve, reject) {\n    params = defaults(params || {}, {\n      cacheId: '',\n      clientsClaim: true,\n      directoryIndex: 'index.html',\n      dontCacheBustUrlsMatching: null,\n      dynamicUrlToDependencies: {},\n      handleFetch: true,\n      ignoreUrlParametersMatching: [/^utm_/],\n      importScripts: [],\n      logger: console.log,\n      maximumFileSizeToCacheInBytes: 2 * 1024 * 1024,\n      // 2MB\n      navigateFallback: '',\n      navigateFallbackWhitelist: [],\n      replacePrefix: '',\n      skipWaiting: true,\n      staticFileGlobs: [],\n      stripPrefix: '',\n      stripPrefixMulti: {},\n      templateFilePath: path.join(path.dirname(fs.realpathSync(__filename)), '..', 'service-worker.tmpl'),\n      verbose: false\n    });\n\n    if (!Array.isArray(params.ignoreUrlParametersMatching)) {\n      params.ignoreUrlParametersMatching = [params.ignoreUrlParametersMatching];\n    }\n\n    var relativeUrlToHash = {};\n    var cumulativeSize = 0;\n    params.stripPrefixMulti[params.stripPrefix] = params.replacePrefix;\n    params.staticFileGlobs.forEach(function (globPattern) {\n      var filesAndSizesAndHashes = getFilesAndSizesAndHashesForGlobPattern(globPattern, params.outputFilePath); // The files returned from glob are sorted by default, so we don't need to sort here.\n\n      filesAndSizesAndHashes.forEach(function (fileAndSizeAndHash) {\n        if (fileAndSizeAndHash.size <= params.maximumFileSizeToCacheInBytes) {\n          // Strip the prefix to turn this into a relative URL.\n          var relativeUrl = fileAndSizeAndHash.file.replace(new RegExp('^(' + Object.keys(params.stripPrefixMulti).map(escapeRegExp).join('|') + ')'), function (match) {\n            return params.stripPrefixMulti[match];\n          }).replace(path.sep, '/');\n          relativeUrlToHash[relativeUrl] = fileAndSizeAndHash.hash;\n\n          if (params.verbose) {\n            params.logger(util.format('Caching static resource \"%s\" (%s)', fileAndSizeAndHash.file, prettyBytes(fileAndSizeAndHash.size)));\n          }\n\n          cumulativeSize += fileAndSizeAndHash.size;\n        } else {\n          params.logger(util.format('Skipping static resource \"%s\" (%s) - max size is %s', fileAndSizeAndHash.file, prettyBytes(fileAndSizeAndHash.size), prettyBytes(params.maximumFileSizeToCacheInBytes)));\n        }\n      });\n    });\n    Object.keys(params.dynamicUrlToDependencies).forEach(function (dynamicUrl) {\n      var dependency = params.dynamicUrlToDependencies[dynamicUrl];\n      var isString = typeof dependency === 'string';\n      var isBuffer = Buffer.isBuffer(dependency);\n\n      if (!Array.isArray(dependency) && !isString && !isBuffer) {\n        throw Error(util.format('The value for the dynamicUrlToDependencies.%s ' + 'option must be an Array, a Buffer, or a String.', dynamicUrl));\n      }\n\n      if (isString || isBuffer) {\n        cumulativeSize += dependency.length;\n        relativeUrlToHash[dynamicUrl] = getHash(dependency);\n      } else {\n        var filesAndSizesAndHashes = dependency.sort().map(function (file) {\n          try {\n            return getFileAndSizeAndHashForFile(file);\n          } catch (e) {\n            // Provide some additional information about the failure if the file is missing.\n            if (e.code === 'ENOENT') {\n              params.logger(util.format('%s was listed as a dependency for dynamic URL %s, but ' + 'the file does not exist. Either remove the entry as a ' + 'dependency, or correct the path to the file.', file, dynamicUrl));\n            } // Re-throw the exception unconditionally, since this should be treated as fatal.\n\n\n            throw e;\n          }\n        });\n        var concatenatedHashes = '';\n        filesAndSizesAndHashes.forEach(function (fileAndSizeAndHash) {\n          // Let's assume that the response size of a server-generated page is roughly equal to the\n          // total size of all its components.\n          cumulativeSize += fileAndSizeAndHash.size;\n          concatenatedHashes += fileAndSizeAndHash.hash;\n        });\n        relativeUrlToHash[dynamicUrl] = getHash(concatenatedHashes);\n      }\n\n      if (params.verbose) {\n        if (isString) {\n          params.logger(util.format('Caching dynamic URL \"%s\" with dependency on user-supplied string', dynamicUrl));\n        } else if (isBuffer) {\n          params.logger(util.format('Caching dynamic URL \"%s\" with dependency on user-supplied buffer', dynamicUrl));\n        } else {\n          params.logger(util.format('Caching dynamic URL \"%s\" with dependencies on %j', dynamicUrl, dependency));\n        }\n      }\n    });\n    var runtimeCaching;\n    var swToolboxCode;\n\n    if (params.runtimeCaching) {\n      runtimeCaching = generateRuntimeCaching(params.runtimeCaching);\n\n      var pathToSWToolbox = require.resolve('sw-toolbox/sw-toolbox.js');\n\n      swToolboxCode = fs.readFileSync(pathToSWToolbox, 'utf8').replace('//# sourceMappingURL=sw-toolbox.js.map', '');\n    } // It's very important that running this operation multiple times with the same input files\n    // produces identical output, since we need the generated service-worker.js file to change if\n    // the input files changes. The service worker update algorithm,\n    // https://w3c.github.io/ServiceWorker/#update-algorithm, relies on detecting even a single\n    // byte change in service-worker.js to trigger an update. Because of this, we write out the\n    // cache options as a series of sorted, nested arrays rather than as objects whose serialized\n    // key ordering might vary.\n\n\n    var relativeUrls = Object.keys(relativeUrlToHash);\n    var precacheConfig = relativeUrls.sort().map(function (relativeUrl) {\n      return [relativeUrl, relativeUrlToHash[relativeUrl]];\n    });\n    params.logger(util.format('Total precache size is about %s for %d resources.', prettyBytes(cumulativeSize), relativeUrls.length));\n    fs.readFile(params.templateFilePath, 'utf8', function (error, data) {\n      if (error) {\n        if (callback) {\n          callback(error);\n        }\n\n        return reject(error);\n      }\n\n      var populatedTemplate = template(data)({\n        cacheId: params.cacheId,\n        clientsClaim: params.clientsClaim,\n        // Ensure that anything false is translated into '', since this will be treated as a string.\n        directoryIndex: params.directoryIndex || '',\n        dontCacheBustUrlsMatching: params.dontCacheBustUrlsMatching || false,\n        externalFunctions: externalFunctions,\n        handleFetch: params.handleFetch,\n        ignoreUrlParametersMatching: params.ignoreUrlParametersMatching,\n        importScripts: params.importScripts ? params.importScripts.map(JSON.stringify).join(',') : null,\n        // Ensure that anything false is translated into '', since this will be treated as a string.\n        navigateFallback: params.navigateFallback || '',\n        navigateFallbackWhitelist: JSON.stringify(params.navigateFallbackWhitelist.map(function (regex) {\n          return regex.source;\n        })),\n        precacheConfig: JSON.stringify(precacheConfig),\n        runtimeCaching: runtimeCaching,\n        skipWaiting: params.skipWaiting,\n        swToolboxCode: swToolboxCode,\n        version: VERSION\n      });\n\n      if (callback) {\n        callback(null, populatedTemplate);\n      }\n\n      resolve(populatedTemplate);\n    });\n  });\n}\n\nfunction write(filePath, params, callback) {\n  return new Promise(function (resolve, reject) {\n    function finish(error, value) {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n\n      if (callback) {\n        callback(error, value);\n      }\n    }\n\n    mkdirp.sync(path.dirname(filePath)); // Keep track of where we're outputting the file to ensure that we don't\n    // pick up a previously written version in our new list of files.\n    // See https://github.com/GoogleChrome/sw-precache/issues/101\n\n    params.outputFilePath = absolutePath(filePath);\n    generate(params).then(function (serviceWorkerFileContents) {\n      fs.writeFile(filePath, serviceWorkerFileContents, finish);\n    }, finish);\n  });\n}\n\nmodule.exports = {\n  generate: generate,\n  write: write\n};\n\nif (process.env.NODE_ENV === 'swprecache-test') {\n  module.exports.generateRuntimeCaching = generateRuntimeCaching;\n}"]}