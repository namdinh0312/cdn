{"version":3,"sources":["wwwroot/js/service-workers/sw-precache/functions.js"],"names":["URL","require","module","exports","stripIgnoredUrlParameters","originalUrl","ignoreUrlParametersMatching","url","hash","search","slice","split","map","kv","filter","every","ignoredRegex","test","join","toString","addDirectoryIndex","index","pathname","isPathWhitelisted","whitelist","absoluteUrlString","length","path","some","whitelistedPathRegex","match","createCacheKey","paramName","paramValue","dontCacheBustUrlsMatching","encodeURIComponent","cleanResponse","originalResponse","redirected","Promise","resolve","body","blob","then","Response","headers","status","statusText"],"mappings":"AAiBA,aAEA,IAAIA,IAAMC,QAAQ,YAElBC,OAAOC,QAAU,CACfC,0BAA2B,SAAmCC,EAAaC,GACzE,IAAIC,EAAM,IAAIP,IAAIK,GAelB,OAbAE,EAAIC,KAAO,GACXD,EAAIE,OAASF,EAAIE,OAAOC,MAAM,GAC7BC,MAAM,KACNC,IAAI,SAAUC,GACb,OAAOA,EAAGF,MAAM,OACfG,OAAO,SAAUD,GAClB,OAAOP,EAA4BS,MAAM,SAAUC,GACjD,OAAQA,EAAaC,KAAKJ,EAAG,QAE9BD,IAAI,SAAUC,GACf,OAAOA,EAAGK,KAAK,OACdA,KAAK,KAEDX,EAAIY,YAEbC,kBAAmB,SAA2Bf,EAAagB,GACzD,IAAId,EAAM,IAAIP,IAAIK,GAMlB,MAJ+B,MAA3BE,EAAIe,SAASZ,OAAO,KACtBH,EAAIe,UAAYD,GAGXd,EAAIY,YAEbI,kBAAmB,SAA2BC,EAAWC,GAEvD,GAAyB,IAArBD,EAAUE,OACZ,OAAO,EAIT,IAAIC,EAAO,IAAI3B,IAAIyB,GAAmBH,SACtC,OAAOE,EAAUI,KAAK,SAAUC,GAC9B,OAAOF,EAAKG,MAAMD,MAGtBE,eAAgB,SAAwB1B,EAAa2B,EAAWC,EAAYC,GAE1E,IAAI3B,EAAM,IAAIP,IAAIK,GAOlB,OAJK6B,GAA8B3B,EAAIe,SAASQ,MAAMI,KACpD3B,EAAIE,SAAWF,EAAIE,OAAS,IAAM,IAAM0B,mBAAmBH,GAAa,IAAMG,mBAAmBF,IAG5F1B,EAAIY,YAKbiB,cAAe,SAAuBC,GAEpC,OAAKA,EAAiBC,YAMJ,SAAUD,EAAmBE,QAAQC,QAAQH,EAAiBI,MAAQJ,EAAiBK,QACtFC,KAAK,SAAUF,GAEhC,OAAO,IAAIG,SAASH,EAAM,CACxBI,QAASR,EAAiBQ,QAC1BC,OAAQT,EAAiBS,OACzBC,WAAYV,EAAiBU,eAXxBR,QAAQC,QAAQH","file":"functions.min.js","sourcesContent":["/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-env node,worker */\n'use strict';\n\nvar URL = require('dom-urls');\n\nmodule.exports = {\n  stripIgnoredUrlParameters: function stripIgnoredUrlParameters(originalUrl, ignoreUrlParametersMatching) {\n    var url = new URL(originalUrl); // Remove the hash; see https://github.com/GoogleChrome/sw-precache/issues/290\n\n    url.hash = '';\n    url.search = url.search.slice(1) // Exclude initial '?'\n    .split('&') // Split into an array of 'key=value' strings\n    .map(function (kv) {\n      return kv.split('='); // Split each 'key=value' string into a [key, value] array\n    }).filter(function (kv) {\n      return ignoreUrlParametersMatching.every(function (ignoredRegex) {\n        return !ignoredRegex.test(kv[0]); // Return true iff the key doesn't match any of the regexes.\n      });\n    }).map(function (kv) {\n      return kv.join('='); // Join each [key, value] array into a 'key=value' string\n    }).join('&'); // Join the array of 'key=value' strings into a string with '&' in between each\n\n    return url.toString();\n  },\n  addDirectoryIndex: function addDirectoryIndex(originalUrl, index) {\n    var url = new URL(originalUrl);\n\n    if (url.pathname.slice(-1) === '/') {\n      url.pathname += index;\n    }\n\n    return url.toString();\n  },\n  isPathWhitelisted: function isPathWhitelisted(whitelist, absoluteUrlString) {\n    // If the whitelist is empty, then consider all URLs to be whitelisted.\n    if (whitelist.length === 0) {\n      return true;\n    } // Otherwise compare each path regex to the path of the URL passed in.\n\n\n    var path = new URL(absoluteUrlString).pathname;\n    return whitelist.some(function (whitelistedPathRegex) {\n      return path.match(whitelistedPathRegex);\n    });\n  },\n  createCacheKey: function createCacheKey(originalUrl, paramName, paramValue, dontCacheBustUrlsMatching) {\n    // Create a new URL object to avoid modifying originalUrl.\n    var url = new URL(originalUrl); // If dontCacheBustUrlsMatching is not set, or if we don't have a match,\n    // then add in the extra cache-busting URL parameter.\n\n    if (!dontCacheBustUrlsMatching || !url.pathname.match(dontCacheBustUrlsMatching)) {\n      url.search += (url.search ? '&' : '') + encodeURIComponent(paramName) + '=' + encodeURIComponent(paramValue);\n    }\n\n    return url.toString();\n  },\n  // When passed a redirected response, this will create a new, \"clean\" response\n  // that can be used to respond to a navigation request.\n  // See https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n  cleanResponse: function cleanResponse(originalResponse) {\n    // If this is not a redirected response, then we don't have to do anything.\n    if (!originalResponse.redirected) {\n      return Promise.resolve(originalResponse);\n    } // Firefox 50 and below doesn't support the Response.body stream, so we may\n    // need to read the entire body to memory as a Blob.\n\n\n    var bodyPromise = 'body' in originalResponse ? Promise.resolve(originalResponse.body) : originalResponse.blob();\n    return bodyPromise.then(function (body) {\n      // new Response() is happy when passed either a stream or a Blob.\n      return new Response(body, {\n        headers: originalResponse.headers,\n        status: originalResponse.status,\n        statusText: originalResponse.statusText\n      });\n    });\n  }\n};"]}