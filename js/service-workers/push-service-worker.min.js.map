{"version":3,"sources":["wwwroot/js/service-workers/push-service-worker.js"],"names":["isClientFocused","clients","matchAll","type","includeUncontrolled","then","windowClients","clientIsFocused","i","length","focused","sendMessageToPage","event","message","promiseChain","self","registration","showNotification","body","forEach","windowClient","postMessage","time","Date","toString","waitUntil","options","promiseChain1","data","targetUrl","ClickTargetPath","notifyCloseNotify","NotifyCloseNotify","title","addEventListener","JSON","parse","text","notification","close","tag","openWindow","focusWindow","dataNotification","notificationCloseAnalytics","fetch","Promise","resolve","urlToOpen","matchingClient","url","focus","notificationData","console","log","Object","keys","key","concat","importScripts","e","caches","open","cache","addAll","respondWith","match","request","response","put","clone"],"mappings":"AAAA,aAEA,SAASA,kBACP,OAAOC,QAAQC,SAAS,CACtBC,KAAM,SACNC,qBAAqB,IACpBC,KAAK,SAAUC,GAGhB,IAFA,IAAIC,GAAkB,EAEbC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IAAK,CAG7C,GAFmBF,EAAcE,GAEhBE,QAAS,CACxBH,GAAkB,EAClB,OAIJ,OAAOA,IAIX,SAASI,kBAAkBC,EAAOC,GAEhC,IAAIC,EAAed,kBAAkBK,KAAK,SAAUE,GAClD,IAAIA,EAQF,OAAOQ,KAAKC,aAAaC,iBAAiB,qBAAsB,CAC9DC,KAAM,+DARRZ,cAAca,QAAQ,SAAUC,GAC9BA,EAAaC,YAAY,CACvBR,QAASA,EACTS,MAAM,IAAIC,MAAOC,iBASzBZ,EAAMa,UAAUX,GAIlB,SAASG,iBAAiBL,EAAOc,GAE/B,IAAIZ,EAAed,kBAAkBK,KAAK,SAAUE,GAClD,GAAIA,EAAiB,CACnB,IAAIoB,EAAgB1B,QAAQC,SAAS,CACnCC,KAAM,SACNC,qBAAqB,IAKtBC,KAAK,SAAUC,GACd,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IACxCF,EAAcE,GAAGa,YAAY,CAC3BR,QAASa,EAAQR,KACjBI,MAAM,IAAIC,MAAOC,eAMvBZ,EAAMa,UAAUE,GAOlB,OAHAD,EAAQE,KAAO,GACfF,EAAQE,KAAKC,UAAYH,EAAQI,gBACjCJ,EAAQE,KAAKG,kBAAoBL,EAAQM,kBAClCjB,KAAKC,aAAaC,iBAAiBS,EAAQO,MAAOP,KAE3Dd,EAAMa,UAAUX,GAIlBC,KAAKmB,iBAAiB,OAAQ,SAAUtB,GAEtCK,iBAAiBL,EADHuB,KAAKC,MAAMxB,EAAMgB,KAAKS,WAKtCtB,KAAKmB,iBAAiB,oBAAqB,SAAUtB,EAAOc,GAG1D,OAFAd,EAAM0B,aAAaC,QAEX3B,EAAM0B,aAAaE,KACzB,IAAK,cACHC,WAAW7B,GACX,MAEF,IAAK,eACH8B,YAAY9B,GACZ,MAEF,IAAK,oBACH+B,iBAAiB/B,MAWvB,IAAIgC,2BAA6B,SAAoChB,GAEnE,OADAiB,MAAMjB,EAAKG,mBACJe,QAAQC,WAUjB,SAASL,YAAY9B,GAInB,IAAIoC,EAAYpC,EAAM0B,aAAaV,KAAKC,UAKpCf,EAAeb,QAAQC,SAAS,CAClCC,KAAM,SACNC,qBAAqB,IAKtBC,KAAK,SAAUC,GAGd,IAFA,IAAI2C,EAAiB,KAEZzC,EAAI,EAAGA,EAAIF,EAAcG,OAAQD,IAAK,CAC7C,IAAIY,EAAed,EAAcE,GAEjC,GAAIY,EAAa8B,MAAQF,EAAW,CAClCC,EAAiB7B,EACjB,OAIJ,OAAI6B,EACKA,EAAeE,QAEflD,QAAQwC,WAAWO,KAK9BpC,EAAMa,UAAUX,GAIlB,SAAS6B,iBAAiB/B,GAExB,IAAIwC,EAAmBxC,EAAM0B,aAAaV,KAC1CyB,QAAQC,IAAI,IACZD,QAAQC,IAAI,uDACZC,OAAOC,KAAKJ,GAAkBjC,QAAQ,SAAUsC,GAC9CJ,QAAQC,IAAI,KAAKI,OAAOD,EAAK,MAAMC,OAAON,EAAiBK,OAE7DJ,QAAQC,IAAI,IAId,SAASb,WAAW7B,GAElB,IACIE,EAAeb,QAAQwC,WADT,kDAElB7B,EAAMa,UAAUX,GA7DlBC,KAAKmB,iBAAiB,oBAAqB,SAAUtB,GACnD,IAAIE,EAAe8B,2BAA2BhC,EAAM0B,aAAaV,MACjEhB,EAAMa,UAAUX,KA+DlB6C,cAAc,yCACd5C,KAAKmB,iBAAiB,UAAW,SAAU0B,GACzCA,EAAEnC,UAAUoC,OAAOC,KAAK,aAAazD,KAAK,SAAU0D,GAClD,OAAOA,EAAMC,OAAO,CAAC,WAGzBjD,KAAKmB,iBAAiB,QAAS,SAAUtB,GACvCA,EAAMqD,YAAYJ,OAAOC,KAAK,aAAazD,KAAK,SAAU0D,GACxD,OAAOA,EAAMG,MAAMtD,EAAMuD,SAAS9D,KAAK,SAAU+D,GAE/C,OADAf,QAAQC,IAAI1C,EAAMuD,SACXC,GAAYvB,MAAMjC,EAAMuD,SAAS9D,KAAK,SAAU+D,GAErD,OADAL,EAAMM,IAAIzD,EAAMuD,QAASC,EAASE,SAC3BF","file":"push-service-worker.min.js","sourcesContent":["\"use strict\";\n\nfunction isClientFocused() {\n  return clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n  }).then(function (windowClients) {\n    var clientIsFocused = false;\n\n    for (var i = 0; i < windowClients.length; i++) {\n      var windowClient = windowClients[i];\n\n      if (windowClient.focused) {\n        clientIsFocused = true;\n        break;\n      }\n    }\n\n    return clientIsFocused;\n  });\n}\n\nfunction sendMessageToPage(event, message) {\n  /**** START sendPageMessage ****/\n  var promiseChain = isClientFocused().then(function (clientIsFocused) {\n    if (clientIsFocused) {\n      windowClients.forEach(function (windowClient) {\n        windowClient.postMessage({\n          message: message,\n          time: new Date().toString()\n        });\n      });\n    } else {\n      return self.registration.showNotification('No focused windows', {\n        body: 'Had to show a notification instead of messaging each page.'\n      });\n    }\n  });\n  event.waitUntil(promiseChain);\n  /**** END sendPageMessage ****/\n}\n\nfunction showNotification(event, options) {\n  /**** START showNotificationRequired ****/\n  var promiseChain = isClientFocused().then(function (clientIsFocused) {\n    if (clientIsFocused) {\n      var promiseChain1 = clients.matchAll({\n        type: 'window',\n        includeUncontrolled: true\n      })\n      /**** END clientsMatchAll ****/\n\n      /**** START searchClients ****/\n      .then(function (windowClients) {\n        for (var i = 0; i < windowClients.length; i++) {\n          windowClients[i].postMessage({\n            message: options.body,\n            time: new Date().toString()\n          });\n        }\n      });\n      /**** END searchClients ****/\n\n      event.waitUntil(promiseChain1);\n    } // Client isn't focused, we need to show a notification.\n\n\n    options.data = {};\n    options.data.targetUrl = options.ClickTargetPath;\n    options.data.notifyCloseNotify = options.NotifyCloseNotify;\n    return self.registration.showNotification(options.title, options);\n  });\n  event.waitUntil(promiseChain);\n  /**** END showNotificationRequired ****/\n}\n\nself.addEventListener('push', function (event) {\n  var options = JSON.parse(event.data.text());\n  showNotification(event, options);\n});\n/**** START notificationActionClickEvent ****/\n\nself.addEventListener('notificationclick', function (event, options) {\n  event.notification.close(); //var options = JSON.parse(event.data.text());\n\n  switch (event.notification.tag) {\n    case 'open-window':\n      openWindow(event);\n      break;\n\n    case 'focus-window':\n      focusWindow(event);\n      break;\n\n    case 'data-notification':\n      dataNotification(event);\n      break;\n\n    default:\n      // NOOP\n      break;\n  }\n\n  ;\n});\n\nvar notificationCloseAnalytics = function notificationCloseAnalytics(data) {\n  fetch(data.notifyCloseNotify);\n  return Promise.resolve();\n};\n/**** START notificationCloseEvent ****/\n\n\nself.addEventListener('notificationclose', function (event) {\n  var promiseChain = notificationCloseAnalytics(event.notification.data);\n  event.waitUntil(promiseChain);\n});\n\nfunction focusWindow(event) {\n  /**** START notificationFocusWindow ****/\n\n  /**** START urlToOpen ****/\n  var urlToOpen = event.notification.data.targetUrl;\n  /**** END urlToOpen ****/\n\n  /**** START clientsMatchAll ****/\n\n  var promiseChain = clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n  })\n  /**** END clientsMatchAll ****/\n\n  /**** START searchClients ****/\n  .then(function (windowClients) {\n    var matchingClient = null;\n\n    for (var i = 0; i < windowClients.length; i++) {\n      var windowClient = windowClients[i];\n\n      if (windowClient.url === urlToOpen) {\n        matchingClient = windowClient;\n        break;\n      }\n    }\n\n    if (matchingClient) {\n      return matchingClient.focus();\n    } else {\n      return clients.openWindow(urlToOpen);\n    }\n  });\n  /**** END searchClients ****/\n\n  event.waitUntil(promiseChain);\n  /**** END notificationFocusWindow ****/\n}\n\nfunction dataNotification(event) {\n  /**** START printNotificationData ****/\n  var notificationData = event.notification.data;\n  console.log('');\n  console.log('The data notification had the following parameters:');\n  Object.keys(notificationData).forEach(function (key) {\n    console.log(\"  \".concat(key, \": \").concat(notificationData[key]));\n  });\n  console.log('');\n  /**** END printNotificationData ****/\n}\n\nfunction openWindow(event) {\n  /**** START notificationOpenWindow ****/\n  var examplePage = '/demos/notification-examples/example-page.html';\n  var promiseChain = clients.openWindow(examplePage);\n  event.waitUntil(promiseChain);\n  /**** END notificationOpenWindow ****/\n}\n\nimportScripts('/js/service-workers/polyfill-cache.js');\nself.addEventListener('install', function (e) {\n  e.waitUntil(caches.open('airhorner').then(function (cache) {\n    return cache.addAll(['/']);\n  }));\n});\nself.addEventListener('fetch', function (event) {\n  event.respondWith(caches.open('airhorner').then(function (cache) {\n    return cache.match(event.request).then(function (response) {\n      console.log(event.request);\n      return response || fetch(event.request).then(function (response) {\n        cache.put(event.request, response.clone());\n        return response;\n      });\n    });\n  }));\n});"]}