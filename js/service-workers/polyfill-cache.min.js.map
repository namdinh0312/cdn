{"version":3,"sources":["wwwroot/js/service-workers/polyfill-cache.js"],"names":["nativeAddAll","Cache","prototype","addAll","userAgent","navigator","match","agent","version","parseInt","requests","cache","this","NetworkError","message","name","code","Object","create","Error","Promise","resolve","then","arguments","length","TypeError","map","request","Request","String","all","scheme","URL","url","protocol","fetch","clone","responses","some","response","ok","i","put","add"],"mappings":"AAAA,cAkBA,WACE,IAAIA,EAAeC,MAAMC,UAAUC,OAC/BC,EAAYC,UAAUD,UAAUE,MAAM,6BAE1C,GAAIF,EACF,IAAIG,EAAQH,EAAU,GAClBI,EAAUC,SAASL,EAAU,IAG/BJ,KAAkBI,GAAuB,YAAVG,GAAkC,IAAXC,GAA2B,WAAVD,GAAiC,IAAXC,KAIjGP,MAAMC,UAAUC,OAAS,SAAgBO,GACvC,IAAIC,EAAQC,KAEZ,SAASC,EAAaC,GACpBF,KAAKG,KAAO,eACZH,KAAKI,KAAO,GACZJ,KAAKE,QAAUA,EAIjB,OADAD,EAAaX,UAAYe,OAAOC,OAAOC,MAAMjB,WACtCkB,QAAQC,UAAUC,KAAK,WAC5B,GAAIC,UAAUC,OAAS,EAAG,MAAM,IAAIC,UAUpC,OAPAf,EAAWA,EAASgB,IAAI,SAAUC,GAChC,OAAIA,aAAmBC,QACdD,EAEAE,OAAOF,KAGXP,QAAQU,IAAIpB,EAASgB,IAAI,SAAUC,GACjB,iBAAZA,IACTA,EAAU,IAAIC,QAAQD,IAGxB,IAAII,EAAS,IAAIC,IAAIL,EAAQM,KAAKC,SAElC,GAAe,UAAXH,GAAiC,WAAXA,EACxB,MAAM,IAAIlB,EAAa,kBAGzB,OAAOsB,MAAMR,EAAQS,cAEtBd,KAAK,SAAUe,GAGhB,GAAIA,EAAUC,KAAK,SAAUC,GAC3B,OAAQA,EAASC,KAEjB,MAAM,IAAI3B,EAAa,6BAKzB,OAAOO,QAAQU,IAAIO,EAAUX,IAAI,SAAUa,EAAUE,GACnD,OAAO9B,EAAM+B,IAAIhC,EAAS+B,GAAIF,QAE/BjB,KAAK,eAKVrB,MAAMC,UAAUyC,IAAM,SAAahB,GACjC,OAAOf,KAAKT,OAAO,CAACwB,MAnExB","file":"polyfill-cache.min.js","sourcesContent":["\"use strict\";\n\n/**\n * Copyright 2015 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n(function () {\n  var nativeAddAll = Cache.prototype.addAll;\n  var userAgent = navigator.userAgent.match(/(Firefox|Chrome)\\/(\\d+\\.)/); // Has nice behavior of `var` which everyone hates\n\n  if (userAgent) {\n    var agent = userAgent[1];\n    var version = parseInt(userAgent[2]);\n  }\n\n  if (nativeAddAll && (!userAgent || agent === 'Firefox' && version >= 46 || agent === 'Chrome' && version >= 50)) {\n    return;\n  }\n\n  Cache.prototype.addAll = function addAll(requests) {\n    var cache = this; // Since DOMExceptions are not constructable:\n\n    function NetworkError(message) {\n      this.name = 'NetworkError';\n      this.code = 19;\n      this.message = message;\n    }\n\n    NetworkError.prototype = Object.create(Error.prototype);\n    return Promise.resolve().then(function () {\n      if (arguments.length < 1) throw new TypeError(); // Simulate sequence<(Request or USVString)> binding:\n\n      var sequence = [];\n      requests = requests.map(function (request) {\n        if (request instanceof Request) {\n          return request;\n        } else {\n          return String(request); // may throw TypeError\n        }\n      });\n      return Promise.all(requests.map(function (request) {\n        if (typeof request === 'string') {\n          request = new Request(request);\n        }\n\n        var scheme = new URL(request.url).protocol;\n\n        if (scheme !== 'http:' && scheme !== 'https:') {\n          throw new NetworkError(\"Invalid scheme\");\n        }\n\n        return fetch(request.clone());\n      }));\n    }).then(function (responses) {\n      // If some of the responses has not OK-eish status,\n      // then whole operation should reject\n      if (responses.some(function (response) {\n        return !response.ok;\n      })) {\n        throw new NetworkError('Incorrect response status');\n      } // TODO: check that requests don't overwrite one another\n      // (don't think this is possible to polyfill due to opaque responses)\n\n\n      return Promise.all(responses.map(function (response, i) {\n        return cache.put(requests[i], response);\n      }));\n    }).then(function () {\n      return undefined;\n    });\n  };\n\n  Cache.prototype.add = function add(request) {\n    return this.addAll([request]);\n  };\n})();"]}